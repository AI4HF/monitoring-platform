input {
  http {
    port => 5000
    codec => "json"
  }
}

filter {
  # Check if the "timestamp" field exists
  if ![timestamp] {
    # Add a "timestamp" field with the current time in ISO8601 format
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Optionally, format the "timestamp" field as a valid date field
  date {
    match => ["timestamp", "ISO8601"]
    target => "timestamp"
  }

  # process input_predictors
  if [event_type] == "prediction" {
    ruby {
      code => "
        if event.get('input_predictors')
          event.set('input_predictors_list', event.get('input_predictors').keys)
          event.set('input_predictors_length', event.get('input_predictors').keys.length)
        end
        event.set('response_received', false)
      "
    }
  }

  # process prediction response
  if [event_type] == "prediction_response" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      query => "_id:%{[prediction_id]}"
      docinfo_fields => {
          "_id" => "document_id"
          "_index" => "document_index"
      }
    }

    mutate {
      add_field => { "response_timestamp" => "%{[@timestamp]}" }
    }
  }
}

output {
  #stdout {
  #  codec => rubydebug
  #}

  if [event_type] == "user" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "users-%{+YYYY.MM.dd}"
    }
  } 

  else if [event_type] == "model" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "models-%{+YYYY.MM.dd}"
    }
  } 

  else if [event_type] == "prediction" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "predictions-%{+YYYY.MM.dd}"
      document_id => "%{[prediction_id]}"  # Use prediction_id as the _id
    }
  } 

  else if [event_type] == "prediction_response" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "%{[document_index]}" # send the updated document to original index since prediction responses might arrive on different day (i.e. different index)
      document_id => "%{[prediction_id]}"  # Use prediction_id to update the document
      action => "update"
      scripted_upsert => true
      script => '
        ctx._source.event_type = "prediction";
        ctx._source.prediction_id = params.event.prediction_id;
        ctx._source.accepted = params.event.accepted;
        ctx._source.response_received = true;
        ctx._source.response_timestamp = params.event.response_timestamp;
      '
    }
  } 

  else {
    # Fallback index for unexpected or missing event_type
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "unsorted_logs-%{+YYYY.MM.dd}"
    }
  }
}